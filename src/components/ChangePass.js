import React, { useState , useEffect, useRef } from "react";import {	View,	Text,	Image,	TouchableOpacity,	ImageBackground,	I18nManager,	Dimensions,	FlatList,	Platform,	Share,} from "react-native";import {Container, Header, Right, Body, Icon, Content, Item, Label, Input, Form, Toast} from 'native-base'import styles from '../../assets/styles'import i18n from "../../locale/i18n";import COLORS from "../consts/colors";import { useDispatch, useSelector } from 'react-redux'import {ScrollView} from "react-native-web";import * as Animatable from "react-native-animatable";const width	 		= Dimensions.get('window').width;const height 		= Dimensions.get('window').height;const isIOS  		= Platform.OS === 'ios';const IS_IPHONE_X 	= (height === 812 || height === 896) && Platform.OS === 'ios';function ChangePass({navigation, route}) {	const lang      = useSelector(state => state.lang.lang);	const dispatch  = useDispatch();	const [code, setCode] = useState('');	const [password, setPassword] = useState('');	const [confirmPass, setConfirmPass] = useState('');	const [codeStatus, setCodeStatus] = useState(0);	const [passwordStatus, setPasswordStatus] = useState(0);	const [confirmPassStatus, setConfirmPassStatus] = useState(0);	// useEffect(() => {	// 	alert('activation code : ' + activeCode)	// }, [])	function activeInput(type) {		if (type === 'code' || code !== '') setCodeStatus(1);		if (type === 'password' || password !== '') setPasswordStatus(1);		if (type === 'confirmPass' || confirmPass !== '') setConfirmPassStatus(1);	}	function unActiveInput(type) {		if (type === 'code' && code === '') setCodeStatus(0);		if (type === 'password' && password === '') setPasswordStatus(0);		if (type === 'confirmPass' && confirmPass === '') setConfirmPassStatus(0);	}	function onChangePassword() {		if (code == activeCode){			if (password === confirmPass)				dispatch(resetPassword(id, password, lang, navigation));			else				Toast.show({					text        	: i18n.t('notmatch'),					type			: "danger",					duration    	: 3000,					textStyle   	: {						color       	: "white",						fontFamily  	: 'ArbFONTS',						textAlign   	: 'center'					}				});		} else {			Toast.show({				text        	: i18n.t('codeNotMatch'),				type			: "danger",				duration    	: 3000,				textStyle   	: {					color       	: "white",					fontFamily  	: 'ArbFONTS',					textAlign   	: 'center'				}			});		}	}	return (		<Container>			<ImageBackground source={require('../../assets/images/menu_bg.png')} style={{ width, height: 200, alignSelf: 'center', flexGrow: 1 }} resizeMode={'cover'}>				<Header style={{ backgroundColor: 'transparent',  borderBottomWidth: 0 }} noShadow>					<Right style={{ flex: 0, marginLeft: 10 }}>						<TouchableOpacity onPress={() => navigation.goBack()} style={{ width: 50, height: 50, justifyCenter: 'center', alignItems: 'center' }}>							<Image source={require('../../assets/images/white_back.png')} style={[ styles.transform , { width: 27, height: 27, marginTop: 10 }]} resizeMode={'contain'}/>						</TouchableOpacity>						<Text style={{ textAlign:  I18nManager.isRTL ? 'right' : 'left', color: '#fff', fontSize: 20, fontFamily: 'ArbFONTSBold', marginBottom: 5 }}>{ i18n.t('changePass') }</Text>					</Right>					<Body style={{ alignSelf: 'flex-start'}} />				</Header>				<View style={[styles.tripHeaderShadow, { backgroundColor: '#fff', marginTop: IS_IPHONE_X ? 100 : 60 }]}>					<View style={[styles.tripHeaderImage, styles.textCenter, { alignItems: 'center', justifyCenter: 'center' }]}>						<Text style={{ textAlign: 'center', width: '100%', color: COLORS.blue, fontSize: 30, fontFamily: 'VIP_cartoon', marginTop: 5 }}>{ i18n.t('safari') }</Text>						<Text style={[styles.textSize_16, styles.text_black, styles.textBold, styles.textCenter, styles.Width_90]}>{ i18n.t('changePassIntro') }</Text>					</View>				</View>				<Content bounces={false} style={{ overflow: 'hidden', borderTopRightRadius: 50, marginTop: 40}}>					<View style={{ width: '100%', padding: 15, borderTopRightRadius: 50, backgroundColor: '#fff', minHeight: 110, }}>						<Form style={[styles.Width_100 , styles.flexCenter, styles.marginVertical_10, styles.Width_90, { marginTop: 70 }]}>							<View style={[styles.position_R, styles.height_70, styles.flexCenter, styles.marginBottom_5 ]}>								<Item floatingLabel style={[styles.item, styles.position_R ]}>									<Label style={[styles.label, styles.textRegular ,{ color:codeStatus === 1 ?  COLORS.blue :  COLORS.gray}]}>{ i18n.t('code') }</Label>									<Input style={[styles.input, styles.height_50, (codeStatus === 1 ? styles.Active : styles.noActive)]}										onChangeText={(code) => setCode(code)}										onBlur={() => unActiveInput('code')}										onFocus={() => activeInput('code')}										keyboardType={'number-pad'}									/>								</Item>							</View>							<View style={[styles.position_R,  styles.height_70, styles.flexCenter, styles.marginBottom_5]}>								<Item floatingLabel style={[styles.item, styles.position_R ]}>									<Label style={[styles.label ,{ color:passwordStatus === 1 ?  COLORS.blue :  COLORS.gray}]}>{ i18n.t('password') }</Label>									<Input										style={[styles.input, styles.height_50, (passwordStatus === 1 ? styles.Active : styles.noActive)]}										onChangeText={(password) => setPassword(password)}										onBlur={() => unActiveInput('password')}										onFocus={() => activeInput('password')}										secureTextEntry									/>								</Item>							</View>							<View style={[styles.position_R,  styles.height_70, styles.flexCenter, styles.marginBottom_5]}>								<Item floatingLabel style={[styles.item, styles.position_R ]}>									<Label style={[styles.label ,{ color:confirmPassStatus === 1 ?  COLORS.blue :  COLORS.gray}]}>{ i18n.t('confirmPass') }</Label>									<Input										style={[styles.input, styles.height_50, (confirmPassStatus === 1 ? styles.Active : styles.noActive)]}										onChangeText={(confirmPass) => setConfirmPass(confirmPass)}										onBlur={() => unActiveInput('confirmPass')}										onFocus={() => activeInput('confirmPass')}										secureTextEntry									/>								</Item>							</View>							<TouchableOpacity onPress={() => onChangePassword()} style={[styles.blueBtn , styles.Width_100]}>								<Text style={[styles.textRegular , styles.text_White , styles.textSize_16]}>{ i18n.t('confirm') }</Text>							</TouchableOpacity>						</Form>					</View>				</Content>			</ImageBackground>		</Container>	)}export default ChangePass;