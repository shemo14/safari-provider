import React, { useState , useEffect, useRef } from "react";import {	View,	Text,	Image,	TouchableOpacity,	ImageBackground,	I18nManager,	Dimensions,	FlatList,	Platform,	Share,} from "react-native";import {Container, Header, Right, Body, Icon, Content, Item, Label, Input, Form, Textarea} from 'native-base'import styles from '../../assets/styles'import i18n from "../../locale/i18n";import COLORS from "../consts/colors";import { useDispatch, useSelector } from 'react-redux'import {ScrollView} from "react-native-web";import * as Animatable from "react-native-animatable";const width	 		= Dimensions.get('window').width;const height 		= Dimensions.get('window').height;const isIOS  		= Platform.OS === 'ios';const IS_IPHONE_X 	= (height === 812 || height === 896) && Platform.OS === 'ios';function Complaint({navigation, route}) {	const [username, setUsername] = useState('');	const [phone, setPhone] 	  = useState('');	const [email, setEmail]       = useState('');	const [msg, setMsg]       	  = useState('');	const [isSubmitted, setIsSubmitted] = useState(false);	const [usernameStatus, setUsernameStatus] = useState(1);	const [phoneStatus, setPhoneStatus] = useState(1);	const [emailStatus, setEmailStatus] = useState(1);	const [msgStatus, setMsgStatus] = useState(1);	function activeInput(type) {		if (type === 'username' || username !== '') {			setUsernameStatus(1)		}		if (type === 'phone' || phone !== '') {			setPhoneStatus(1)		}		if (type === 'email' || email !== '') {			setEmailStatus(1)		}		if (type === 'msg' || msg!== '') {			setMsgStatus(1)		}	}	function unActiveInput(type) {		if (type === 'username' && username === '') {			setUsernameStatus(0)		}		if (type === 'phone' && phone === '') {			setPhoneStatus(0)		}		if (type === 'email' && email === '') {			setEmailStatus(0)		}		if (type === 'msg' || msg!== '') {			setMsgStatus(0)		}	}	function renderEdit(){		if (username == '' || phone == '' ){			return (				<View style={[styles.blueBtn , styles.Width_100 , {backgroundColor:'#ddd'}]}>					<Text style={[styles.textRegular , styles.text_White , styles.textSize_16]}>{ i18n.t('confirm') }</Text>				</View>			);		}		if (isSubmitted){			return(				<View style={[{ justifyContent: 'center', alignItems: 'center' } , styles.marginTop_25]}>					<ActivityIndicator size="large" color={COLORS.blue} style={{ alignSelf: 'center' }} />				</View>			)		}		return (			<TouchableOpacity onPress={() => onEdit()} style={[styles.blueBtn , styles.Width_100 ]}>				<Text style={[styles.textRegular , styles.text_White , styles.textSize_16]}>{ i18n.t('confirm') }</Text>			</TouchableOpacity>		);	}	return (		<Container>			<ImageBackground source={require('../../assets/images/menu_bg.png')} style={{ width, height: 200, alignSelf: 'center', flexGrow: 1 }} resizeMode={'cover'}>				<Header style={{ backgroundColor: 'transparent',  borderBottomWidth: 0 }} noShadow>					<Right style={{ flex: 0, marginLeft: 10 }}>						<TouchableOpacity onPress={() => navigation.goBack()} style={{ width: 50, height: 50, justifyCenter: 'center', alignItems: 'center' }}>							<Image source={require('../../assets/images/white_back.png')} style={[ styles.transform , { width: 27, height: 27, marginTop: 10 }]} resizeMode={'contain'}/>						</TouchableOpacity>						<Text style={{ textAlign:  I18nManager.isRTL ? 'right' : 'left', color: '#fff', fontSize: 20, fontFamily: 'ArbFONTSBold', marginBottom: 5 }}>{ i18n.t('complaint') }</Text>					</Right>					<Body style={{ alignSelf: 'flex-start'}} />				</Header>				<View style={[styles.tripHeaderShadow, { backgroundColor: '#fff', marginTop: IS_IPHONE_X ? 100 : 60 }]}>					<View style={[styles.tripHeaderImage, styles.textCenter, { alignItems: 'center', justifyCenter: 'center' }]}>						<Text style={{ textAlign: 'center', width: '100%', color: COLORS.blue, fontSize: 30, fontFamily: 'VIP_cartoon', marginTop: 5 }}>{ i18n.t('safari') }</Text>						<Text style={[styles.textSize_16, styles.text_black, styles.textBold, styles.textCenter, styles.Width_90]}>{ i18n.t('complaintIntro') }</Text>					</View>				</View>				<Content bounces={false} style={{ overflow: 'hidden', borderTopRightRadius: 50, marginTop: 40}}>					<View style={{ width: '100%', padding: 15, borderTopRightRadius: 50, backgroundColor: '#fff', minHeight: 110, }}>						<Form style={[styles.Width_100 , styles.flexCenter, styles.marginVertical_10, styles.Width_90, { marginTop: 70 }]}>							<View style={[styles.position_R, styles.height_70, styles.flexCenter, styles.marginBottom_10 ]}>								<Item floatingLabel style={[styles.item, styles.position_R ]}>									<Label style={[styles.label, styles.textRegular ,{ color:usernameStatus === 1 ?  COLORS.blue :  COLORS.gray}]}>{ i18n.t('username') }</Label>									<Input style={[styles.input, styles.height_50, (usernameStatus === 1 ? styles.Active : styles.noActive)]}										onChangeText={(username) => setUsername(username)}										onBlur={() => unActiveInput('username')}										onFocus={() => activeInput('username')}										value={'Mohamed Shams'}									/>								</Item>							</View>							<View style={[styles.position_R, styles.height_70, styles.flexCenter, styles.marginBottom_5 ]}>								<Item floatingLabel style={[styles.item, styles.position_R ]}>									<Label style={[styles.label, styles.textRegular ,{ color:phoneStatus === 1 ?  COLORS.blue :  COLORS.gray}]}>{ i18n.t('phone') }</Label>									<Input style={[styles.input, styles.height_50, (phoneStatus === 1 ? styles.Active : styles.noActive)]}										onChangeText={(phone) => setPhone(phone)}										onBlur={() => unActiveInput('phone')}										onFocus={() => activeInput('phone')}										keyboardType={'number-pad'}										value={'01094985095'}									/>								</Item>							</View>							<View style={[styles.position_R,  styles.height_70, styles.flexCenter, { marginTop: 15, marginBottom: 20 }]}>								<Item style={[styles.item, styles.position_R ]}>									<Textarea value={msg}										placeholder={i18n.t('complaintMsg')} bordered={false}										style={[styles.textArea, styles.height_80, (msgStatus === 1 ? styles.Active : styles.noActive)]}										onChangeText={(msg) => setMsg(msg)}										onBlur={()  => unActiveInput('msg')}										onFocus={() => activeInput('msg')}									/>								</Item>							</View>							{ renderEdit() }						</Form>					</View>				</Content>			</ImageBackground>		</Container>	)}export default Complaint;